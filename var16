#include <iostream>
#include <string>
#include <vector>
#include <memory>

using namespace std;

// Базовый класс для периферийных устройств
class PeripheralDevice {
protected:
    string partNumber; // Номенклатурный номер устройства
    string brand;      // Бренд устройства
    double price;      // Стоимость устройства

public:
    // Конструктор для инициализации общих свойств устройства
    PeripheralDevice(const string& partNumber, const string& brand, double price)
        : partNumber(partNumber), brand(brand), price(price) {}

    // Виртуальный деструктор для корректного удаления объектов производных классов
    virtual ~PeripheralDevice() = default;

    // Виртуальный метод для вывода информации об устройстве
    virtual void displayInfo() const {
        cout << "Номенклатурный номер: " << partNumber << "\n"
             << "Бренд: " << brand << "\n"
             << "Стоимость: " << price << " руб.\n";
    }
};

// Класс для наушников, наследуется от PeripheralDevice
class Headphones : public PeripheralDevice {
private:
    string constructionType; // Тип конструкции наушников
    string mountingMethod;   // Метод крепления наушников

public:
    // Конструктор для инициализации свойств наушников
    Headphones(const string& partNumber, const string& brand, double price,
               const string& constructionType, const string& mountingMethod)
        : PeripheralDevice(partNumber, brand, price),
          constructionType(constructionType),
          mountingMethod(mountingMethod) {}

    // Переопределение метода displayInfo для вывода информации о наушниках
    void displayInfo() const override {
        PeripheralDevice::displayInfo(); // Вызов метода базового класса
        cout << "Тип конструкции: " << constructionType << "\n"
             << "Метод крепления: " << mountingMethod << "\n";
    }
};

// Класс для микрофона, наследуется от PeripheralDevice
class Microphone : public PeripheralDevice {
private:
    string frequencyRange; // Частотный диапазон микрофона
    string sensitivity;    // Чувствительность микрофона

public:
    // Конструктор для инициализации свойств микрофона
    Microphone(const string& partNumber, const string& brand, double price,
               const string& frequencyRange, const string& sensitivity)
        : PeripheralDevice(partNumber, brand, price),
          frequencyRange(frequencyRange),
          sensitivity(sensitivity) {}

    // Переопределение метода displayInfo для вывода информации о микрофоне
    void displayInfo() const override {
        PeripheralDevice::displayInfo(); // Вызов метода базового класса
        cout << "Частотный диапазон: " << frequencyRange << "\n"
             << "Чувствительность: " << sensitivity << "\n";
    }
};

// Класс для клавиатуры, наследуется от PeripheralDevice
class Keyboard : public PeripheralDevice {
private:
    string switchType; // Тип выключателя клавиатуры
    string interface;  // Интерфейс подключения клавиатуры

public:
    // Конструктор для инициализации свойств клавиатуры
    Keyboard(const string& partNumber, const string& brand, double price,
             const string& switchType, const string& interface)
        : PeripheralDevice(partNumber, brand, price),
          switchType(switchType),
          interface(interface) {}

    // Переопределение метода displayInfo для вывода информации о клавиатуре
    void displayInfo() const override {
        PeripheralDevice::displayInfo(); // Вызов метода базового класса
        cout << "Тип выключателя: " << switchType << "\n"
             << "Интерфейс: " << interface << "\n";
    }
};

// Фабричный метод для создания устройств
unique_ptr<PeripheralDevice> createDevice(const string& type,
                                          const string& partNumber,
                                          const string& brand,
                                          double price,
                                          const string& param1 = "",
                                          const string& param2 = "") {
    // Создание объекта наушников
    if (type == "Headphones") {
        return make_unique<Headphones>(partNumber, brand, price, param1, param2);
    }
    // Создание объекта микрофона
    else if (type == "Microphone") {
        return make_unique<Microphone>(partNumber, brand, price, param1, param2);
    }
    // Создание объекта клавиатуры
    else if (type == "Keyboard") {
        return make_unique<Keyboard>(partNumber, brand, price, param1, param2);
    }
    // Обработка неизвестного типа устройства
    else {
        throw invalid_argument("Неизвестный тип устройства");
    }
}

int main() {
    // Создаем список устройств
    vector<unique_ptr<PeripheralDevice>> devices;

    // Добавляем устройства в список с помощью фабричного метода
    devices.push_back(createDevice("Headphones", "H123", "Sony", 5000, "Накладные", "Оголовье"));
    devices.push_back(createDevice("Microphone", "M456", "Shure", 8000, "50Hz-20kHz", "-50dB"));
    devices.push_back(createDevice("Keyboard", "K789", "Logitech", 3000, "Мембранные", "USB"));

    // Основной цикл программы
    while (true) {
        // Вывод меню выбора устройств
        cout << "Доступные устройства:\n";
        cout << "1. Наушники\n";
        cout << "2. Микрофон\n";
        cout << "3. Клавиатура\n";
        cout << "Введите номер устройства для отображения информации (1-3) или 0 для выхода: ";
        int choice;
        cin >> choice;

        // Выход из программы, если пользователь ввел 0
        if (choice == 0) {
            cout << "Выход из программы.\n";
            break;
        }

        // Проверка корректности ввода
        if (choice < 1 || choice > devices.size()) {
            cout << "Неверный выбор. Попробуйте снова.\n";
            continue;
        }

        // Вывод информации по выбранному устройству
        cout << "Информация по устройству #" << choice << ":\n";
        devices[choice - 1]->displayInfo();
        cout << "-------------------\n";
    }

    return 0;
}
